

select * from dataset where id in (
select  dataset_id from datasetversion
where versionstate = 'DEACCESSIONED'
);

select count(*) from dataset where id in (
    select  dataset_id from datasetversion
    where versionstate = 'DEACCESSIONED'
    );


"""
Retrieve list of datasets that have both
DEACCESSIONED and RELEASED versions
"""

from dv_apps.datasets.models import DatasetVersion

# list of DEACCESSIONED dataset ids
#
deaccessioned_ids = DatasetVersion.objects.filter(\
                versionstate='DEACCESSIONED'\
                ).order_by('dataset_id'\
                ).values_list('dataset_id', flat=True\
                ).distinct()

# Query by list of DEACCESSIONED dataset ids
#   that also have RELEASED versions
#
ds_list = DatasetVersion.objects.filter(\
                dataset_id__in=deaccessioned_ids,
                versionstate='RELEASED'\
                ).order_by('dataset_id'
                ).values_list('dataset_id', flat=True\
                ).distinct()

# Print links
#
for ds_id in ds_list:
    print 'https://dataverse.harvard.edu/dataset.xhtml?id=%s' % ds_id







----

qs1 = DatasetVersion.objects.filter(\
                versionstate='DEACCESSIONED'\
                ).values('dataset_id',\
                ).annotate(cnt=models.Count('dataset_id')
                ).values('dataset_id', 'cnt',
                ).order_by('-cnt')
deaccessioned_dict = {}
for item in qs1:
    deaccessioned_dict.update(\
            {'dataset_id' : item.get('dataset_id'),
             'cnt' : item.get('cnt')})

qs1 = DatasetVersion.objects.filter(\
                 versionstate='DEACCESSIONED'\
                 ).values('dataset_id',\
                 ).annotate(cnt=models.Count('dataset_id')
                 ).values('dataset_id', 'cnt',
                 ).order_by('-cnt')

line_cnt = 0
ds_ids = []
for item in qs:
    line_cnt += 1
    deaccession_cnt = item.get('cnt')
    dataset_id = item.get('dataset_id')
    print '(%s) checking id: %s' % (line_cnt, dataset_id)
    if DatasetVersion.objects.filter(\
            dataset_id=dataset_id,
            versionstate='RELEASED').count() > 0:
        ds_ids.append(dataset_id)
    #if line_cnt == 10:
    #    break
print ds_ids
print len(ds_ids)
